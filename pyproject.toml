[build-system]
requires = ["flit-core"]
build-backend = "flit_core.buildapi"

[dependency-groups]
coverage = ["coverage[toml]"]
test = ["pytest", {include-group = "coverage"}]
docs = ["sphinx>=8.1", "sphinx-issues>=5", "furo"]
lint = ["pre-commit"]
typing = ["mypy", "packaging"]
build = ["twine", "build"]
dev = [{include-group = "test"}]

[project]
name = "dependency-groups"
version = "1.3.0"
description = 'A tool for resolving PEP 735 Dependency Group data'
readme = "README.rst"
requires-python = ">=3.8"
license = { text = "MIT" }
keywords = []
authors = [
  { name = "Stephen Rosen", email = "sirosen0@gmail.com" },
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "packaging",
    "tomli;python_version<'3.11'",
]

[project.scripts]
lint-dependency-groups = "dependency_groups._lint_dependency_groups:main"
pip-install-dependency-groups = "dependency_groups._pip_wrapper:main"
dependency-groups = "dependency_groups.__main__:main"

[project.optional-dependencies]
cli = ["tomli; python_version<'3.11'"]

[project.urls]
source = "https://github.com/sirosen/dependency-groups"
changelog = "https://github.com/sirosen/dependency-groups/blob/main/CHANGELOG.rst"
documentation = "https://dependency-groups.readthedocs.io/"


[tool.flit.sdist]
include = ["LICENSE.txt", "CHANGELOG.rst", "tests/*.py", "tox.ini"]


[tool.uv]
environments = [
  "python_version >= '3.10'",
]


[tool.coverage.run]
parallel = true
source = ["dependency_groups"]

[tool.coverage.paths]
source = [
    "src/",
    "*/site-packages/",
]
[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    # the pragma to disable coverage
    "pragma: no cover",
    # don't complain if tests don't hit unimplemented methods/modes
    "raise NotImplementedError",
    # don't check on executable components of importable modules
    "if __name__ == .__main__.:",
    # mypy-only code segments
    "if t.TYPE_CHECKING:",
    # type-checking overloads
    "@t.overload"
]

[tool.mypy]
strict = true
ignore_missing_imports = true
disallow_subclassing_any = false
files = ["src"]

[tool.isort]
profile = "black"
known_first_party = ["mddj"]

[tool.check-sdist]
git-only = [".*", "Makefile", "docs/*", "scripts/*"]


[tool.tox]
requires = ["tox>=4.22"]
env_list = [
    "lint",
    "mypy",
    "covclean",
    "covcombine",
    "covreport",
    "3.8",
    "3.9",
    "3.10",
    "3.11",
    "3.12",
    "3.13",
]

[tool.tox.labels]
ci = ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13", "covcombine", "covreport"]
ci-mypy = ["mypy-py38", "mypy-py313"]
ci-package-check = ["twine-check"]

[tool.tox.env_run_base]
description = "Run tests and coverage"
package = "wheel"
wheel_build_env = "build_wheel"
dependency_groups = ["test"]
commands = [["coverage", "run", "-m", "pytest", "-v", {replace = "posargs", extend = true}]]
depends = ["clean"]

[tool.tox.env.covclean]
description = "Clean coverage outputs"
skip_install = true
dependency_groups = ["coverage"]
commands = [["coverage", "erase"]]

[tool.tox.env.covcombine]
description = "Combine coverage outputs"
skip_install = true
dependency_groups = ["coverage"]
commands = [["coverage", "combine"]]
depends = ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

[tool.tox.env.covreport]
description = "Report on combined coverage outputs"
skip_install = true
dependency_groups = ["coverage"]
commands_pre = [["coverage", "html", "--fail-under=0"]]
commands = [["coverage", "report"]]
depends = ["covcombine"]

[tool.tox.env.lint]
description = "Run linterse and formatters"
dependency_groups = ["lint"]
commands = [["pre-commit", "run", "-a", {replace = "posargs", extend = true}]]
depends = []

[tool.tox.env.mypy]
package = "skip"
description = "Run static type checking under {base_python}"
dependency_groups = ["typing"]
commands = [["mypy", "src/", {replace = "posargs", extend = true} ]]
depends = []

[tool.tox.env.mypy-py38]
base = ["tool.tox.env.mypy"]

[tool.tox.env.mypy-py313]
base = ["env.mypy"]

[tool.tox.env.twine-check]
description = "check the metadata on a package build"
allowlist_externals = ["rm"]
dependency_groups = ["build"]
commands_pre = [["rm", "-rf", "dist/"]]
# check that twine validating package data works
commands = [["python", "-m", "build"],
           ["twine", "check", "dist/*"]]


[tool.tox.env.docs]
description = "build docs with sphinx"
basepython = ["python3.12"]
dependency_groups = ["docs"]
allowlist_externals = ["rm"]
changedir = "docs/"
# clean the build dir before rebuilding
commands_pre = [["rm", "-rf", "_build/"]]
commands = [["sphinx-build", "-d", "_build/doctrees", "-b", "dirhtml", "-W", ".", "_build/dirhtml", {replace = "posargs", extend = true}]]
